Test on L2 cache:
L2 specification:
256KB, 64 B cache line, 8-way associative, 512 sets

Array type: 2-dimensional
Elements: arr[1024][16] = 16384 elements
Data type: uint64_t
Total size of array: 128 KB (Half the size of L2 cache)
L2 Prefetching: disabled

All the array elements were accessed row wise sequentially for 10 iterations to see how many L2 cache references and misses were recorded.
The result was as expected. According to the result, there were 2048 references for each of the 10 iterations.  
Since, granularity of cache fill is a cache line which is 64 bytes, we expect 8 uint64_t type elements to be loaded at once. As there are a total of 16384 such elements, there should be 16384 / 8 = 2048 references which is as shown by the results. The misses for the first iteration are almost equal to the no of references after which it goes to 0 or values close to 0 for all the subsequent iterations. Ideally, the misses should all be 0 after the first iteration because the entire array has already been loaded into the memory but it is sometimes greater than 0 which might be because L2 is being used for something else also and therefore by putting 32768 uint64_t elements into it, we are overflowing it. So, it has more no of references and misses because some of the entries might get evicted and have to be load again into L2.  

