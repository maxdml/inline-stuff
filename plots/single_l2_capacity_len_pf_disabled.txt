Test on L2 cache:
L2 specification:
256KB, 64 B cache line, 8-way associative, 512 sets

Array type: Single-dimensional
Elements: 32768
Data type: uint64_t
Total size of array: 256 KB (Equal to size of L2 cache)
L2 Prefetching: disabled

All the array elements were accessed sequentially for 10 iterations to see how many L2 cache references and misses were recorded.
The result was not as expected. According to the result, there were 8192 references and 8192 misses for each of the 10 iterations.  
Since, granularity of cache fill is a cache line which is 64 bytes, we expect 8 uint64_t type elements to be loaded at once. As there are a total of 32768 such elements, there should be 32768 / 8 = 4096 references and misses which is half of what we observed form the results. This might be because L2 is being used for something else also and therefore by putting 32768 uint64_t elements into it, we are overflowing it. So, it has more no of references and misses because some of the entries might get evicted and have to be load again into L2.  

One surprising thing here about the L3 cache is that there are 8192 references for each iteration and there are never any misses. There should atleast be 1 for the very first iteration when the data is loaded from memory.
